# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build & deploy

env:
  AWS_REGION: eu-central-1
  AWS_API_GW_STAGE_NAME: prod

on:
  push:
    branches: [ "v2", "deploy"]  

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2                         # default
        verbose: false                     # default
        arch: amd64 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.2.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}        
        role-duration-seconds: 1200
        role-session-name: GithubSession
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: >
        API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`ContactAPI`].id | [0]' --output text);
        export API_URL=https://${API_ID}.execute-api.${{env.AWS_REGION}}.amazonaws.com/${{env.AWS_API_GW_STAGE_NAME}}/;
        print $API_URL
    - run: npm run build --if-present

    - uses: keithweaver/aws-s3-github-action@v1.0.0
      if: github.ref == 'refs/heads/v2'
      with:
        command: sync
        source: ./out        
        destination: ${{ vars.S3_BUCKET }}
        # aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # aws_region: ${{env.AWS_REGION}}
